// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addToken = `-- name: AddToken :exec
insert into user_token (user_id, token)
values ($1, $2)
ON CONFLICT (token) DO NOTHING
`

type AddTokenParams struct {
	UserID int32  `json:"user_id"`
	Token  string `json:"token"`
}

func (q *Queries) AddToken(ctx context.Context, arg AddTokenParams) error {
	_, err := q.db.Exec(ctx, addToken, arg.UserID, arg.Token)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, name, email)
VALUES ($1, $2, $3) 
RETURNING id, username, name, email
`

type CreateUserParams struct {
	Username string      `json:"username"`
	Name     string      `json:"name"`
	Email    pgtype.Text `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Username, arg.Name, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Name,
		&i.Email,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, username, name, email FROM users
WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Name,
		&i.Email,
	)
	return i, err
}

const getUserFromToken = `-- name: GetUserFromToken :one
select u.id, u.username, u.name, u.email 
from users u
inner join user_token ut on u.id = ut.user_id and ut.token = $1
`

func (q *Queries) GetUserFromToken(ctx context.Context, token string) (User, error) {
	row := q.db.QueryRow(ctx, getUserFromToken, token)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Name,
		&i.Email,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, name, email FROM users
ORDER BY id
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Name,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const loginUser = `-- name: LoginUser :one
insert into user_token (user_id, token)
values($1, $2)
ON CONFLICT (token) DO NOTHING
RETURNING id, user_id, token
`

type LoginUserParams struct {
	UserID int32  `json:"user_id"`
	Token  string `json:"token"`
}

func (q *Queries) LoginUser(ctx context.Context, arg LoginUserParams) (UserToken, error) {
	row := q.db.QueryRow(ctx, loginUser, arg.UserID, arg.Token)
	var i UserToken
	err := row.Scan(&i.ID, &i.UserID, &i.Token)
	return i, err
}
