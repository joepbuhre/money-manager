// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: accounts.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (code,name,description,account_type)
VALUES ($1, $2, $3, $4) 
RETURNING id, created_at, updated_at, code, name, description, account_type
`

type CreateAccountParams struct {
	Code        string      `json:"code"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
	AccountType int32       `json:"account_type"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, createAccount,
		arg.Code,
		arg.Name,
		arg.Description,
		arg.AccountType,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Code,
		&i.Name,
		&i.Description,
		&i.AccountType,
	)
	return i, err
}

const getAccount = `-- name: GetAccount :one
SELECT id, created_at, updated_at, code, name, description, account_type FROM accounts
WHERE id = $1
`

func (q *Queries) GetAccount(ctx context.Context, id int32) (Account, error) {
	row := q.db.QueryRow(ctx, getAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Code,
		&i.Name,
		&i.Description,
		&i.AccountType,
	)
	return i, err
}

const getAccountByCode = `-- name: GetAccountByCode :one
SELECT id, created_at, updated_at, code, name, description, account_type FROM accounts
WHERE code = $1
`

func (q *Queries) GetAccountByCode(ctx context.Context, code string) (Account, error) {
	row := q.db.QueryRow(ctx, getAccountByCode, code)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Code,
		&i.Name,
		&i.Description,
		&i.AccountType,
	)
	return i, err
}

const listaccounts = `-- name: Listaccounts :many
SELECT id, created_at, updated_at, code, name, description, account_type FROM accounts
ORDER BY id
`

func (q *Queries) Listaccounts(ctx context.Context) ([]Account, error) {
	rows, err := q.db.Query(ctx, listaccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Code,
			&i.Name,
			&i.Description,
			&i.AccountType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
