// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: budgets.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createBudget = `-- name: CreateBudget :one
INSERT INTO budgets (name, description, budget_amount, budget_type)
VALUES ($1, $2, $3, $4) 
RETURNING id, created_at, updated_at, name, description, budget_amount, budget_type
`

type CreateBudgetParams struct {
	Name         pgtype.Int4    `json:"name"`
	Description  pgtype.Text    `json:"description"`
	BudgetAmount pgtype.Numeric `json:"budget_amount"`
	BudgetType   int32          `json:"budget_type"`
}

func (q *Queries) CreateBudget(ctx context.Context, arg CreateBudgetParams) (Budget, error) {
	row := q.db.QueryRow(ctx, createBudget,
		arg.Name,
		arg.Description,
		arg.BudgetAmount,
		arg.BudgetType,
	)
	var i Budget
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Description,
		&i.BudgetAmount,
		&i.BudgetType,
	)
	return i, err
}

const deleteBudget = `-- name: DeleteBudget :exec
delete from budgets where id = $1
`

func (q *Queries) DeleteBudget(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteBudget, id)
	return err
}

const getBudgetById = `-- name: GetBudgetById :one
SELECT id, created_at, updated_at, name, description, budget_amount, budget_type FROM budgets
WHERE id = $1
`

func (q *Queries) GetBudgetById(ctx context.Context, id int32) (Budget, error) {
	row := q.db.QueryRow(ctx, getBudgetById, id)
	var i Budget
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Description,
		&i.BudgetAmount,
		&i.BudgetType,
	)
	return i, err
}

const getBudgetByName = `-- name: GetBudgetByName :one
SELECT id, created_at, updated_at, name, description, budget_amount, budget_type FROM budgets
WHERE name = $1
`

func (q *Queries) GetBudgetByName(ctx context.Context, name pgtype.Int4) (Budget, error) {
	row := q.db.QueryRow(ctx, getBudgetByName, name)
	var i Budget
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Description,
		&i.BudgetAmount,
		&i.BudgetType,
	)
	return i, err
}

const listBudgets = `-- name: ListBudgets :many
SELECT id, created_at, updated_at, name, description, budget_amount, budget_type FROM budgets
ORDER BY id
`

func (q *Queries) ListBudgets(ctx context.Context) ([]Budget, error) {
	rows, err := q.db.Query(ctx, listBudgets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Budget
	for rows.Next() {
		var i Budget
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Description,
			&i.BudgetAmount,
			&i.BudgetType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
