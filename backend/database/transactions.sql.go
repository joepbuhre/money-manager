// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: transactions.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getTransactions = `-- name: GetTransactions :one
SELECT id, created_at, updated_at, account_id, description, debit, credit, reconciled FROM transactions
WHERE id = $1
`

func (q *Queries) GetTransactions(ctx context.Context, id int32) (Transaction, error) {
	row := q.db.QueryRow(ctx, getTransactions, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AccountID,
		&i.Description,
		&i.Debit,
		&i.Credit,
		&i.Reconciled,
	)
	return i, err
}

const getTransactionsByAccount = `-- name: GetTransactionsByAccount :one
SELECT id, created_at, updated_at, account_id, description, debit, credit, reconciled FROM transactions
WHERE account_id = $1
`

func (q *Queries) GetTransactionsByAccount(ctx context.Context, accountID pgtype.Int4) (Transaction, error) {
	row := q.db.QueryRow(ctx, getTransactionsByAccount, accountID)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AccountID,
		&i.Description,
		&i.Debit,
		&i.Credit,
		&i.Reconciled,
	)
	return i, err
}

const listtransactions = `-- name: Listtransactions :many
SELECT id, created_at, updated_at, account_id, description, debit, credit, reconciled FROM transactions
ORDER BY id
`

func (q *Queries) Listtransactions(ctx context.Context) ([]Transaction, error) {
	rows, err := q.db.Query(ctx, listtransactions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.AccountID,
			&i.Description,
			&i.Debit,
			&i.Credit,
			&i.Reconciled,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
