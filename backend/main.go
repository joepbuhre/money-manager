package main

import (
	"database/sql"
	"log"
	_ "money-manager/docs"
	routers "money-manager/routes"

	// gin-swagger middleware

	"github.com/spf13/viper"
	ginSwagger "github.com/swaggo/gin-swagger"

	"github.com/gin-gonic/gin"
	swaggerFiles "github.com/swaggo/files"
)

// docs is generated by Swag CLI, you have to import it.

// swagger embed files

//	@title			Swagger Example API
//	@version		1.0
//	@description	This is a sample server celler server.
//	@termsOfService	http://swagger.io/terms/

//	@contact.name	API Support
//	@contact.url	http://www.swagger.io/support
//	@contact.email	support@swagger.io

//	@license.name	Apache 2.0
//	@license.url	http://www.apache.org/licenses/LICENSE-2.0.html

//	@host		localhost:8080
//	@BasePath	/api

//	@securityDefinitions.apikey	ApiKeyAuth
//	@in							header
//	@name						Authorization

// @externalDocs.description	OpenAPI
// @externalDocs.url			https://swagger.io/resources/open-api/
type Env struct {
	db      *sql.DB
	baseurl string
}

// use viper package to load/read the config file or .env file and
// return the value of the key
func viperConfigVariable(key string) string {

	// name of config file (without extension)
	viper.SetConfigFile(".env")
	// look for config in the working directory
	viper.AddConfigPath(".")

	// Find and read the config file
	err := viper.ReadInConfig()

	if err != nil {
		log.Fatalf("Error while reading config file %s", err)
	}

	// viper.Get() returns an empty interface{}
	// to get the underlying type of the key,
	// we have to do the type assertion, we know the underlying value is string
	// if we type assert to other type it will throw an error
	value, ok := viper.Get(key).(string)

	// If the type is a string then ok will be true
	// ok will make sure the program not break
	if !ok {
		log.Fatalf("Invalid type assertion")
	}

	return value
}

func main() {
	viper.SetConfigFile(".env")

	env := &Env{baseurl: viperConfigVariable("BASE_PATH")}

	// database.ApplyMigrations(env.db)

	router := gin.Default()

	// Public routes
	public := router.Group(env.baseurl)
	routers.AddMainRouter(public)

	// user.AddUserRouter(public, env.db)

	// Private routes
	// private := router.Group("/api")
	// private.Use(middlewares.GetAuthMiddleware(env.db))

	router.GET("/docs/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	router.Run("localhost:8080")

}
